package lab4_2.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@Repository("courseDao")
public class CourseDaoImpl implements CourseDao{

    private static final String SQL_SELECT_COURSE =
            "SELECT id, title, length, description FROM courses";

    private static final String SQL_SELECT_COURSE_BY_ID =
            SQL_SELECT_COURSE + " WHERE id = ?";

    private static final String SQL_SELECT_COURSE_BY_TITLE =
            SQL_SELECT_COURSE + " WHERE title LIKE ?";  // for case-insensitive matching, use ILIKE

    private static final String SQL_DELETE_COURSE_BY_ID =
            "DELETE FROM courses WHERE id = ?";

    private static final String SQL_INSERT_COURSE =
            "INSERT INTO courses (title, length, description) VALUES (?, ?, ?) RETURNING id";

    private static final String SQL_UPDATE_COURSE =
            "UPDATE courses SET title = ?, length = ?, description = ? WHERE id = ?";

    // ==============================

//    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private CourseRowMapper courseRowMapper;

    // ==============================

    public JdbcTemplate getJdbcTemplate() {
        return jdbcTemplate;
    }

    @Autowired
    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    // ==============================

    @Override
    public Course findById(int id) {

        return getJdbcTemplate().queryForObject(
                SQL_SELECT_COURSE_BY_ID,
                courseRowMapper,
                id
        );
    }

    @Override
    public List<Course> findAll() {
        List<Map<String, Object>> rows =  getJdbcTemplate().queryForList(SQL_SELECT_COURSE);

        /* option 1 */
        /* manual unwrapping */
//        List<Course> courses = new ArrayList<Course>();
//        for (Map<String, Object> row : rows) {
//            courses.add(new Course(
//                    (int)row.get("id"),
//                    (String) row.get("title"),
//                    (int)row.get("length"),
//                    (String) row.get("description"))
//            );
//        }
//
//        return courses;

        /* option 2 */
        /* our own custom RowMapper */
//        return getJdbcTemplate().query(SQL_SELECT_COURSE, courseRowMapper);

        /* option 3 */
        /* built-in RowMapper only if class properties match table entity */
        return getJdbcTemplate().query(SQL_SELECT_COURSE, new BeanPropertyRowMapper<>(Course.class));
    }

    @Override
    public List<Course> findByTitle(String title) {

        return getJdbcTemplate().query(SQL_SELECT_COURSE_BY_TITLE,
                courseRowMapper,  // or use: new BeanPropertyRowMapper<>(Course.class)
//                new BeanPropertyRowMapper<>(Course.class),
                "%"+title+"%"
        );

    }

    @Override
    public void insert(Course course) {
        PreparedStatementCreatorFactory f =
                new PreparedStatementCreatorFactory(SQL_INSERT_COURSE,
                        Types.VARCHAR, Types.INTEGER, Types.VARCHAR);

        f.setGeneratedKeysColumnNames("id");
        KeyHolder kh = new GeneratedKeyHolder();  // allows to get autogenerated id field from table

        getJdbcTemplate().update(
                f.newPreparedStatementCreator(new Object[] {
                        course.getTitle(), course.getLength(), course.getDescription()}),
                kh);

        course.setId(kh.getKey().intValue());
    }

    @Override
    public void update(Course course) {
        getJdbcTemplate().update(
                SQL_UPDATE_COURSE,
                course.getTitle(),
                course.getLength(),
                course.getDescription(),
                course.getId()
                );

    }

    @Override
    public void delete(int id) {

        getJdbcTemplate().update(SQL_DELETE_COURSE_BY_ID, id);
    }
}
